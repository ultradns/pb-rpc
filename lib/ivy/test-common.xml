<!-- dont include directly, use common.xml -->
<project name="test-common">

  <!-- junit support -->
  <macrodef name="test-units">  
    <element name="junit-args" optional="yes"/>
    <element name="junit-classpath" optional="yes"/>
    <attribute name="coverage" default="yes" />
    <attribute name="include-pattern" default="**/*Test.java" />
    <attribute name="exclude-pattern" default="" />
    <attribute name="jvmargs" default="" />
    <attribute name="maxmemory" default="1028m" />
    <sequential>
      <delete dir="${reports.dir}/units"/>
      <mkdir dir="${reports.dir}/units"/>
      
      <antcall target="-emma-init">
        <param name="coverage.enabled" value="@{coverage}"/>
      </antcall>
      
      <junit printsummary="yes" 
        haltonfailure="false"
        maxmemory="@{maxmemory}"
        failureProperty="test.failure">
          <classpath>
              <!-- load from test conf first -->
              <pathelement path="${test.dir}:${config.dir}"/>
              <!-- put coverage instrumented classes first on classpath -->
              <pathelement path="${coverage.build.dir}:${test.build.dir}:${build.dir}/"/>
              <fileset dir="${lib.dir}/test" includes="*.jar" excludes="ant.jar"/>
              <junit-classpath/>
          </classpath>
          
          <jvmarg value="-Demma.coverage.out.file=${coverage.build.dir}/coverage.emma" />
          <jvmarg value="-Demma.coverage.out.merge=true" />
          <jvmarg line="@{jvmargs}" />
          <formatter type="xml"/>
          <batchtest fork="yes" todir="${reports.dir}/units">
            <fileset dir="${test.dir}">
              <include name="@{include-pattern}"/>
              <exclude name="@{exclude-pattern}"/>
            </fileset>
          </batchtest>
        </junit>
        <fail message="Unit Tests Failed" if="test.failure" />
        
        <antcall target="-emma-final">
          <param name="coverage.enabled" value="@{coverage}"/>
        </antcall>
        
      </sequential>
  </macrodef>
  
  <!-- emma support -->
  <target name="-emma-init" if="${coverage.enabled}">
    <property name="coverage.report.dir" value="${reports.dir}/coverage"/>
    <!-- clean up the reports now -->
    <delete dir="${coverage.report.dir}"/>
    <mkdir dir="${coverage.report.dir}"/>

    <!-- Instrument classes in the build directory -->
    <taskdef resource="emma_ant.properties">
      <classpath>
        <pathelement location="${lib.dir}/test/emma.jar" />
        <pathelement location="${lib.dir}/test/emma_ant.jar" />
      </classpath>
    </taskdef>
    
    <emma enabled="${coverage.enabled}" >
      <instr destdir="${coverage.build.dir}" metadatafile="${coverage.build.dir}/metadata.emma" merge="false">
        <instrpath>
          <pathelement location="${build.dir}"/>
        </instrpath>
      </instr>
    </emma>
  </target>

  <target name="-emma-final" if="${coverage.enabled}">
    <property name="coverage.report.dir" value="${reports.dir}/coverage"/>
    <taskdef resource="emma_ant.properties">
      <classpath>
        <pathelement location="${lib.dir}/test/emma.jar" />
        <pathelement location="${lib.dir}/test/emma_ant.jar" />
      </classpath>
    </taskdef>
    <!-- generate coverage report -->
    <emma enabled="${coverage.enabled}" >
      <report>
        <sourcepath id="coverage.src.dir">
          <pathelement path="${src.dir}"/>
        </sourcepath>
        <fileset dir="${coverage.build.dir}">
          <include name="*.emma"/>
        </fileset>
        <txt outfile="${coverage.report.dir}/coverage.txt"/>
        <html outfile="${coverage.report.dir}/coverage.html"/>
        <xml outfile="${coverage.report.dir}/coverage.xml"/>
      </report>
    </emma>
  </target>
  
</project>

